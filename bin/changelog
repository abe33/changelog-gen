#!/usr/bin/env node
;
var COMMIT_URL, CONFIG, CSON, DEFAULT_CONFIG, EXTERNAL_LINK_ISSUE, FIRST_COMMIT, GITHUB_URL, GIT_COMMIT_DATE, GIT_COMMIT_SEARCH, GIT_FIRST_COMMIT, GIT_LAST_TAG_CMD, GIT_LOG_CMD, GIT_TAGS_CMD, GIT_TAG_COMMIT, HEAD, HEADER_TPL, ISSUE_URL, LAST_TAG, LINK_COMMIT, LINK_ISSUE, NONE, OnigRegExp, PACKAGE_JSON, REPO_URL, all_tags, all_tags_date, args, binPath, child, config_file, config_file_paths, curate_versions, current_date, d, error, filter_commit, find_fixes, find_rev_index_for_commit, first_commit, first_to_exists, fs, get_all_tags, get_commit_body, get_commit_closes, get_commit_of_tag, get_commit_output, get_date_of_commit, get_date_of_tag, get_end, get_first_commit, get_previous_tag, get_section_config, get_start, get_tag_of_commit, i, indent, link_to_commit, link_to_issue, lower_first_char, natural_sort, node, option, options, package_json_path, parse_raw_commit, path, print_version, print_versions, q, read_git_log, reverse_array, section, stream, string_or_url, util, warn, _i, _len, _ref, _ref1,
  __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

q = require('qq');

fs = require('fs');

path = require('path');

child = require('child_process');

util = require('util');

CSON = require('cson');

natural_sort = require('javascript-natural-sort');

OnigRegExp = require('oniguruma').OnigRegExp;

LAST_TAG = 'last-tag';

FIRST_COMMIT = 'TAIL';

HEAD = 'HEAD';

NONE = 'none';

GIT_LOG_CMD = 'git log -E --format=%s %s | cat';

GIT_LAST_TAG_CMD = 'git describe --tags --abbrev=0';

GIT_TAGS_CMD = 'git tag';

GIT_FIRST_COMMIT = 'git rev-list HEAD | tail -n 1';

GIT_COMMIT_SEARCH = 'git name-rev --name-only ';

GIT_TAG_COMMIT = 'git rev-parse %s';

GIT_COMMIT_DATE = 'git show -s --format=%ci %s';

DEFAULT_CONFIG = path.resolve(__dirname, '..', 'config', 'default.cson');

options = {
  start: LAST_TAG,
  end: HEAD
};

first_to_exists = function() {
  var file, files, _i, _len;
  files = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  for (_i = 0, _len = files.length; _i < _len; _i++) {
    file = files[_i];
    if (fs.existsSync(file)) {
      return file;
    }
  }
};

warn = function() {
  return console.error("WARNING:", util.format.apply(null, arguments));
};

error = function() {
  console.error("ERROR:", util.format.apply(null, arguments));
  return process.exit();
};

string_or_url = function(field) {
  if (typeof field === 'string') {
    return field;
  } else {
    return field != null ? field.url : void 0;
  }
};

_ref = process.argv, node = _ref[0], binPath = _ref[1], args = 3 <= _ref.length ? __slice.call(_ref, 2) : [];

while (args.length) {
  option = args.shift();
  switch (option) {
    case '--repo':
    case '-r':
      options.repo = args.shift();
      break;
    case '--config':
    case '-c':
      options.config = args.shift();
      break;
    case '--start':
    case '-s':
      options.start = args.shift();
      break;
    case '--end':
    case '-e':
      options.end = args.shift();
      break;
    case '--angular':
    case '-a':
      options.config = path.resolve(__dirname, '..', 'config', 'angular.cson');
      break;
    default:
      options.tag = option;
  }
}

package_json_path = path.resolve('.', 'package.json');

PACKAGE_JSON = fs.existsSync(package_json_path) ? require(package_json_path) : options.repo == null ? error("Can't locate a package.json in the current directory. Please at last specify the --repo option") : {
  repository: options.repo
};

GITHUB_URL = 'https://github.com/';

REPO_URL = string_or_url(PACKAGE_JSON.repository);

ISSUE_URL = string_or_url(PACKAGE_JSON.bugs);

COMMIT_URL = string_or_url(PACKAGE_JSON.commits);

if (ISSUE_URL == null) {
  if ((REPO_URL != null) && REPO_URL.indexOf('http') === 0) {
    ISSUE_URL = REPO_URL + '/issues';
  } else {
    return error("Can't locate the `bugs` field in package.json");
  }
}

if (COMMIT_URL == null) {
  warn("Can't locate the `commits` field in package.json, building it using bugs url");
  COMMIT_URL = ISSUE_URL.replace('issues', 'commit');
}

HEADER_TPL = "\n<a name=\"%s\"></a>\n# %s (%s)\n";

LINK_ISSUE = "[#%s](" + ISSUE_URL + "/%s)";

EXTERNAL_LINK_ISSUE = "[%s#%s](" + GITHUB_URL + "%s/issues/%s)";

LINK_COMMIT = "[%s](" + COMMIT_URL + "/%s)";

stream = process.stdout;

config_file_paths = [DEFAULT_CONFIG];

if (options.config != null) {
  config_file_paths.unshift(options.config);
} else {
  config_file_paths.unshift(path.resolve('.', 'changelog.cson'));
  config_file_paths.unshift(path.resolve('.', 'changelog.json'));
}

config_file = first_to_exists.apply(null, config_file_paths);

CONFIG = CSON.parseFile(config_file);

if (CONFIG.sections == null) {
  error("Can't locate the `sections` field in " + config_file);
}

_ref1 = CONFIG.sections;
for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
  section = _ref1[i];
  section.regexp = new OnigRegExp(section.match);
}

find_rev_index_for_commit = function(commit, tags) {
  var deferred;
  deferred = q.defer();
  if (__indexOf.call(tags, commit) >= 0) {
    deferred.resolve(tags.indexOf(commit));
  } else {
    get_tag_of_commit(commit, tags).then(function(tag) {
      return deferred.resolve(tags.indexOf(tag) - 1);
    });
  }
  return deferred.promise;
};

filter_commit = function(commit) {
  var breaking, closes, match, name, regexp, subject, _j, _len1, _ref2;
  if (commit == null) {
    return false;
  }
  subject = commit.subject, breaking = commit.breaking, closes = commit.closes;
  if (subject == null) {
    return false;
  }
  _ref2 = CONFIG.sections;
  for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
    section = _ref2[_j];
    regexp = section.regexp, name = section.name;
    match = regexp.searchSync(subject);
    if (match != null) {
      commit.section = name;
      if (section.replace != null) {
        commit.subject = section.replace.replace(/\\(\d)/g, function(m, i) {
          return match[i].match;
        });
      }
      if (section.grouping_capture != null) {
        commit.group = match[section.grouping_capture].match;
      }
      return true;
    }
  }
  if (breaking != null) {
    return true;
  }
  return false;
};

get_commit_of_tag = function(tag) {
  var cmd, deferred;
  deferred = q.defer();
  cmd = util.format(GIT_TAG_COMMIT, tag);
  child.exec(cmd, function(code, stdout, stderr) {
    if (code) {
      return deferred.reject("Can't find the commit for tag " + tag);
    } else {
      return deferred.resolve(stdout.replace('\n', ''));
    }
  });
  return deferred.promise;
};

get_date_of_commit = function(commit) {
  var cmd, deferred;
  deferred = q.defer();
  cmd = util.format(GIT_COMMIT_DATE, commit);
  child.exec(cmd, function(code, stdout, stderr) {
    if (code) {
      return deferred.reject("Can't find the commit " + commit);
    } else {
      return deferred.resolve(stdout.split('\n').slice(-2)[0].split(' ')[0]);
    }
  });
  return deferred.promise;
};

get_date_of_tag = function(tag) {
  return get_commit_of_tag(tag).then(function(commit) {
    return get_date_of_commit(commit);
  });
};

get_tag_of_commit = function(sha, tags) {
  var cmd, deferred;
  cmd = GIT_COMMIT_SEARCH + sha;
  deferred = q.defer();
  child.exec(cmd, function(code, stdout, stderr) {
    var offset, res, tag, _ref2;
    if (code) {
      return get_first_commit().then(function(commit) {
        return deferred.resolve(commit);
      });
    } else {
      res = stdout.replace('\n', '');
      _ref2 = res.split('~'), tag = _ref2[0], offset = _ref2[1];
      if (__indexOf.call(tags, tag) < 0) {
        tag = 'HEAD';
      }
      return deferred.resolve(tag);
    }
  });
  return deferred.promise;
};

get_all_tags = function() {
  var deferred;
  deferred = q.defer();
  child.exec(GIT_TAGS_CMD, function(code, stdout, stderr) {
    if (code) {
      return deferred.resolve([]);
    } else {
      return deferred.resolve(stdout.split('\n').filter(function(s) {
        return s.length !== 0;
      }));
    }
  });
  return deferred.promise;
};

get_previous_tag = function() {
  var deferred;
  deferred = q.defer();
  child.exec(GIT_LAST_TAG_CMD, function(code, stdout, stderr) {
    if (code) {
      return get_first_commit().then(function(commit) {
        return deferred.resolve(commit);
      });
    } else {
      return deferred.resolve(stdout.replace('\n', ''));
    }
  });
  return deferred.promise;
};

get_first_commit = function() {
  var deferred;
  deferred = q.defer();
  child.exec(GIT_FIRST_COMMIT, function(code, stdout, stderr) {
    if (code) {
      return deferred.reject("Cannot get the first commit.");
    } else {
      return deferred.resolve(stdout.replace('\n', ''));
    }
  });
  return deferred.promise;
};

parse_raw_commit = function(raw) {
  var breaking_regexp, lines, match, msg;
  if (raw == null) {
    return null;
  }
  lines = raw.split('\n');
  msg = {};
  msg.hash = lines.shift();
  msg.subject = lines.shift();
  msg.closes = [];
  lines = lines.filter(function(line) {
    return find_fixes(line, msg);
  });
  msg.body = lines.join("\n");
  breaking_regexp = /(?:BREAKING CHANGE|:warning):([\s\S]*)/;
  match = msg.body.match(breaking_regexp);
  if (match) {
    msg.breaking = match[1];
    msg.body = msg.body.replace(breaking_regexp, '');
  }
  return msg;
};

read_git_log = function(from, to) {
  var cmd, deferred, range;
  if (to == null) {
    to = 'HEAD';
  }
  deferred = q.defer();
  range = from != null ? "" + from + ".." + to : '';
  cmd = util.format(GIT_LOG_CMD, '%H%n%s%n%b%n==END==', range);
  child.exec(cmd, function(code, stdout, stderr) {
    var commits;
    commits = stdout.split('\n==END==\n').map(function(rawCommit) {
      return rawCommit.split('\n').filter(function(s) {
        return s.length;
      }).join('\n');
    }).map(parse_raw_commit).filter(filter_commit);
    return deferred.resolve(commits);
  });
  return deferred.promise;
};

reverse_array = function(array) {
  var a, o, _j, _len1;
  a = [];
  for (_j = 0, _len1 = array.length; _j < _len1; _j++) {
    o = array[_j];
    a.unshift(o);
  }
  return a;
};

lower_first_char = function(s) {
  return s.replace(/^\s*[^\s]/, function(m) {
    return m.toLowerCase();
  });
};

link_to_issue = function(_arg) {
  var issue, repo;
  repo = _arg[0], issue = _arg[1];
  if (repo != null) {
    return util.format(EXTERNAL_LINK_ISSUE, repo, issue, repo, issue);
  } else {
    return util.format(LINK_ISSUE, issue, issue);
  }
};

indent = function(s) {
  var last_line, lines, output;
  lines = s.split('\n');
  last_line = lines.pop();
  output = '  ' + lines.join('\n  ');
  output += last_line.length > 0 ? '\n  ' + last_line : '\n';
  return output;
};

link_to_commit = function(hash) {
  return util.format(LINK_COMMIT, hash.substr(0, 8), hash);
};

current_date = function() {
  var now, pad;
  now = new Date();
  pad = function(i) {
    return ("0" + i).substr(-2);
  };
  return util.format("%d-%s-%s", now.getFullYear(), pad(now.getMonth() + 1), pad(now.getDate()));
};

find_fixes = function(line, msg) {
  var issue, issue_re, match, re, repo, _;
  issue_re = "([^\\s/]+/[^\\s#]+)?#(\\d+)";
  re = RegExp("(?:close|closes|closed|fix|fixes|fixed|resolve|resolves|resolved)\\s" + issue_re, "i");
  match = re.exec(line);
  if (match != null) {
    _ = match[0], repo = match[1], issue = match[2];
    msg.closes.push([repo, issue]);
  }
  return match == null;
};

curate_versions = function(tags_steps) {
  return function(commits_groups) {
    var commit, commits, commits_per_tag, current_tag, tag, version, versions, _base, _j, _k, _l, _len1, _len2, _len3, _name, _ref2, _ref3;
    commits_per_tag = [];
    for (i = _j = 0, _len1 = commits_groups.length; _j < _len1; i = ++_j) {
      commits = commits_groups[i];
      current_tag = tags_steps[i];
      if (current_tag === HEAD) {
        current_tag = void 0;
      }
      commits_per_tag.push([current_tag, commits]);
    }
    versions = [];
    _ref2 = reverse_array(commits_per_tag);
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      _ref3 = _ref2[_k], tag = _ref3[0], commits = _ref3[1];
      if (commits.length === 0) {
        continue;
      }
      version = {
        tag: tag,
        commits: {},
        breaks: []
      };
      for (_l = 0, _len3 = commits.length; _l < _len3; _l++) {
        commit = commits[_l];
        if (commit.section != null) {
          ((_base = version.commits)[_name = commit.section] || (_base[_name] = [])).push(commit);
        }
        if (commit.breaking != null) {
          version.breaks.push(commit);
        }
      }
      versions.push(version);
    }
    return versions;
  };
};

get_section_config = function(name) {
  var _j, _len1, _ref2;
  _ref2 = CONFIG.sections;
  for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
    section = _ref2[_j];
    if (section.name === name) {
      return section;
    }
  }
  return null;
};

get_commit_body = function(commit, section_config) {
  if (section_config.include_body && commit.body.length > 0) {
    return indent("<br>" + commit.body);
  } else {
    return '';
  }
};

get_commit_closes = function(commit) {
  var closes;
  closes = commit.closes.map(link_to_issue).join(', ');
  if (closes.length > 0) {
    return ", " + closes;
  } else {
    return '';
  }
};

get_commit_output = function(commit, section_config) {
  var closes, commit_body;
  closes = get_commit_closes(commit);
  commit_body = get_commit_body(commit, section_config);
  return "- " + commit.subject + " (" + (link_to_commit(commit.hash)) + closes + ")" + commit_body + "\n";
};

print_version = function(version, date) {
  var breaking_commits, commit, commit_output, commits, group, grouped_commits, non_grouped_commits, section_config, section_name, tag, _j, _k, _l, _len1, _len2, _len3, _len4, _m, _ref2, _ref3;
  tag = (_ref2 = version.tag) != null ? _ref2 : options.tag;
  stream.write(util.format(HEADER_TPL, tag, tag, date != null ? date : current_date()));
  _ref3 = CONFIG.sections;
  for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
    section_config = _ref3[_j];
    section_name = section_config.name;
    commits = version.commits[section_name];
    if (commits == null) {
      continue;
    }
    stream.write("\n## " + section_name + "\n\n");
    non_grouped_commits = commits.filter(function(commit) {
      return commit.group == null;
    });
    grouped_commits = {};
    commits.filter(function(commit) {
      return commit.group != null;
    }).forEach(function(commit) {
      var _name;
      grouped_commits[_name = commit.group] || (grouped_commits[_name] = []);
      return grouped_commits[commit.group].push(commit);
    });
    for (group in grouped_commits) {
      commits = grouped_commits[group];
      stream.write("- **" + group + "**:\n");
      for (_k = 0, _len2 = commits.length; _k < _len2; _k++) {
        commit = commits[_k];
        commit_output = get_commit_output(commit, section_config);
        stream.write(indent(commit_output));
      }
    }
    for (_l = 0, _len3 = non_grouped_commits.length; _l < _len3; _l++) {
      commit = non_grouped_commits[_l];
      commit_output = get_commit_output(commit, section_config);
      stream.write(commit_output);
    }
  }
  breaking_commits = version.breaks;
  if (breaking_commits.length) {
    stream.write('\n## Breaking Changes\n\n');
    for (_m = 0, _len4 = breaking_commits.length; _m < _len4; _m++) {
      commit = breaking_commits[_m];
      stream.write("- due to " + (link_to_commit(commit.hash)) + "," + (lower_first_char(commit.breaking)) + "\n");
    }
  }
  return stream.write('\n');
};

print_versions = function(versions, dates) {
  var version, _j, _len1, _results;
  _results = [];
  for (_j = 0, _len1 = versions.length; _j < _len1; _j++) {
    version = versions[_j];
    _results.push(print_version(version, dates[version.tag]));
  }
  return _results;
};

first_commit = get_first_commit();

get_start = options.start === FIRST_COMMIT ? first_commit : options.start === LAST_TAG ? get_previous_tag() : (d = q.defer(), d.resolve(options.start), d.promise);

get_end = options.end === LAST_TAG ? get_previous_tag() : (d = q.defer(), d.resolve(options.end), d.promise);

all_tags = get_all_tags();

all_tags_date = all_tags.then(function(tags) {
  return q.all(tags.map(function(tag) {
    return get_date_of_tag(tag);
  })).then(function(tags_date) {
    var date, o, _j, _len1;
    o = {};
    for (i = _j = 0, _len1 = tags_date.length; _j < _len1; i = ++_j) {
      date = tags_date[i];
      o[tags[i]] = date;
    }
    return o;
  });
});

q.all([first_commit, all_tags, get_start, get_end, all_tags_date]).then(function(_arg) {
  var first_sha, from, get_end_index, get_start_index, tags, tags_date, to;
  first_sha = _arg[0], tags = _arg[1], from = _arg[2], to = _arg[3], tags_date = _arg[4];
  tags = tags.sort(natural_sort);
  tags.unshift(first_sha);
  tags.push(HEAD);
  get_start_index = find_rev_index_for_commit(from, tags);
  get_end_index = find_rev_index_for_commit(to, tags);
  return q.all([get_start_index, get_end_index]).then(function(_arg1) {
    var end_index, from_tag, read_commits, start_index, tags_steps, to_tag, _j, _ref2;
    start_index = _arg1[0], end_index = _arg1[1];
    read_commits = [];
    tags_steps = [];
    if (end_index !== start_index) {
      for (i = _j = _ref2 = start_index + 1; _ref2 <= end_index ? _j <= end_index : _j >= end_index; i = _ref2 <= end_index ? ++_j : --_j) {
        from_tag = tags[i - 1];
        to_tag = tags[i];
        tags_steps.push(to_tag);
        read_commits.push(read_git_log(from_tag, to_tag));
      }
    } else {
      to_tag = tags[start_index];
    }
    if (to_tag !== to) {
      read_commits.push(read_git_log(options.grep, to_tag, to));
    }
    return q.all(read_commits).then(curate_versions(tags_steps)).then(function(versions) {
      return print_versions(versions, tags_date);
    }).fail(function(reason) {
      return console.error(reason);
    });
  });
});
