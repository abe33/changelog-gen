#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const util = require('util');
const CSON = require('cson');
const child = require('child_process');
const naturalSort = require('javascript-natural-sort');

const LAST_TAG = 'last-tag';
const FIRST_COMMIT = 'TAIL';
const HEAD = 'HEAD';
const NONE = 'none';

const GIT_LOG_CMD = 'git log -E --format=%s %s | cat';
const GIT_LAST_TAG_CMD = 'git describe --tags --abbrev=0';
const GIT_TAGS_CMD = 'git tag';
const GIT_FIRST_COMMIT = 'git rev-list HEAD | tail -n 1';
const GIT_COMMIT_SEARCH = 'git name-rev --name-only ';
const GIT_TAG_COMMIT = 'git rev-parse %s';
const GIT_COMMIT_DATE = s => `git show -s --format=%ci ${s}`;

const DEFAULT_CONFIG = path.resolve(__dirname,  '..', 'config', 'default.cson');

const options = {
  start: LAST_TAG,
  end: HEAD
};

function firstToExist(...files) {
  for (let file of Array.from(files)) {
    if (fs.existsSync(file)) { return file; }
  }
};

function warn() {
  return console.error("WARNING:", util.format.apply(null, arguments));
};

function error(e) {
  if (e.stack != null) {
    console.error(e.stack);
  } else {
    console.error("Error:", util.format.apply(null, [e]));
  }
  return process.exit();
};

function stringOrURL(field) {
  return typeof field === 'string'
    ? field
    : (field != null ? field.url : undefined);
};

let [node, binPath, ...args] = Array.from(process.argv);

while (args.length) {
  let option = args.shift();

  switch (option) {
    // Commands
    case '--repo': case '-r':
      options.repo = args.shift();
      break;
    case '--config': case '-c':
      options.config = args.shift();
      break;
    case '--start': case '-s':
      options.start = args.shift();
      break;
    case '--end': case '-e':
      options.end = args.shift();
      break;
    case '--angular': case '-a':
      options.config = path.resolve(__dirname,  '..', 'config', 'angular.cson');
      break;
    default:
      options.tag = option;
  }
}

const PACKAGE_JSON_PATH = path.resolve('.', 'package.json');
const PACKAGE_JSON = fs.existsSync(PACKAGE_JSON_PATH)
  ? require(PACKAGE_JSON_PATH)
  : (options.repo == null
      ? error("Can't locate a package.json in the current directory. Please at least specify the --repo option")
      : { repository: options.repo });

const GITHUB_URL = 'https://github.com/';
const REPO_URL = stringOrURL(PACKAGE_JSON.repository);
let ISSUE_URL = stringOrURL(PACKAGE_JSON.bugs);
let COMMIT_URL = stringOrURL(PACKAGE_JSON.commits);

if (ISSUE_URL == null) {
  if ((REPO_URL != null) && (REPO_URL.indexOf('http') === 0)) {
    ISSUE_URL = REPO_URL + '/issues';
  } else {
    error("Can't locate the `bugs` field in package.json");
  }
}

if (COMMIT_URL == null) {
  warn("Can't locate the `commits` field in package.json, building it using bugs url");
  COMMIT_URL = ISSUE_URL.replace('issues', 'commit');
}

const HEADER_TPL = "\n<a name=\"%s\"></a>\n# %s (%s)\n";
const LINK_ISSUE = `[#%s](${ISSUE_URL}/%s)`;
const EXTERNAL_LINK_ISSUE = `[%s#%s](${GITHUB_URL}%s/issues/%s)`;
const LINK_COMMIT = `[%s](${COMMIT_URL}/%s)`;

const stream = process.stdout;

let configFilePaths = [
  DEFAULT_CONFIG
];

if (options.config != null) {
  configFilePaths.unshift(options.config);
} else {
  configFilePaths.unshift(path.resolve('.', 'changelog.cson'));
  configFilePaths.unshift(path.resolve('.', 'changelog.json'));
}

let configFile = firstToExist(...Array.from(configFilePaths || []));

const CONFIG = /\.cson$/.test(configFile)
  ? CSON.parse(fs.readFileSync(configFile).toString())
  : require(configFile);

if (CONFIG.sections == null) { error(`Can't locate the \`sections\` field in ${configFile}`); }

for (let i = 0; i < CONFIG.sections.length; i++) {
  const section = CONFIG.sections[i];
  section.regexp = new RegExp(section.match);
}
async function exec(cmd, errMsg='') {
  return new Promise((resolve, reject) => {
    child.exec(cmd, (code, stdout, stderr) => {
      if (code) {
        reject(errMsg);
      } else {
        resolve(stdout);
      }
    });
  });
}

async function findRevIndexForCommit(commit, tags) {
  if (Array.from(tags).includes(commit)) {
    return tags.indexOf(commit);
  } else {
    const tag = await getTagOfCommit(commit, tags);
    return tags.indexOf(tag) - 1;
  }
}

function filterCommit(commit) {
  if (commit == null) { return false; }
  const {subject, breaking, closes} = commit;
  if (subject == null) { return false; }

  for (let section of Array.from(CONFIG.sections)) {
    const {regexp, name} = section;
    var match = regexp.exec(subject);
    if (match != null) {
      commit.section = name;
      if (section.replace != null) {
        commit.subject = section.replace.replace(/\\(\d)/g, (m,i) => match[i] != null ? match[i] : '');
      }

      if (section.grouping_capture != null) {
        commit.group = match[section.grouping_capture];
      }

      return true;
    }
  }

  if (breaking != null) { return true; }

  return false;
}

async function getCommitOfTag(tag) {
  const cmd = util.format(GIT_TAG_COMMIT, tag);
  const stdout = await exec(cmd, `Can't find the commit for tag ${tag}`);
  return stdout.replace('\n', '');
}

async function getDateOfCommit(commit) {
  const cmd = GIT_COMMIT_DATE(commit);
  const stdout = await exec(cmd, `Can't find the commit ${commit}`);
  return stdout.split('\n').slice(-2)[0].split(' ')[0];
}

async function getDateOfTag(tag) {
  const commit = await getCommitOfTag(tag);
  return getDateOfCommit(commit);
}

async function getTagOfCommit(sha, tags) {
  const cmd = GIT_COMMIT_SEARCH + sha;
  try {
    const stdout = await exec(cmd);
    const res = stdout.replace('\n', '');
    const [tag, offset] = Array.from(res.split('~'));
    if (!Array.from(tags).includes(tag)) { tag = 'HEAD'; }
    return tag;
  } catch(e) {
    return getFirstCommit();
  }
}

async function getAllTags() {
  try {
    const stdout = await exec(GIT_TAGS_CMD);
    return stdout.split('\n').filter(s => s.length !== 0);
  } catch(e) {
    return [];
  }
}

async function getPreviousTag() {
  try {
    const stdout = await exec(GIT_LAST_TAG_CMD);
    return stdout.replace('\n', '');
  } catch {
    return getFirstCommit()
  }
}

async function getFirstCommit() {
  const stdout = await exec(GIT_FIRST_COMMIT, 'Cannot get the first commit.');
  return stdout.replace('\n', '');
}

function parseRawCommit(raw) {
  if (raw == null) { return null; }

  let lines = raw.split('\n');
  const msg = {};
  msg.hash = lines.shift();
  msg.subject = lines.shift();
  msg.closes = [];

  lines = lines.filter(line => findFixes(line, msg));

  msg.body = lines.join("\n");
  const breakingRe = /(?:BREAKING CHANGE|:warning):([\s\S]*)/;
  const match = msg.body.match(breakingRe);
  if (match) {
    msg.breaking = match[1];
    msg.body = msg.body.replace(breakingRe, '');
  }

  return msg;
}

async function readGitLog(from, to) {
  if (to == null) { to = 'HEAD'; }

  const range = from != null ? `${from}..${to}` : '';
  const cmd = util.format(GIT_LOG_CMD, '%H%n%s%n%b%n==END==', range);
  const stdout = await exec(cmd, 'Unable to retrieve git logs');

  return stdout
    .split('\n==END==\n')
    .map(rawCommit =>
      rawCommit
        .split('\n')
        .filter(s => s.length)
        .join('\n'))
    .map(parseRawCommit)
    .filter(filterCommit);
}

function reverseArray(array) {
  let a = [];
  for (let o of Array.from(array)) { a.unshift(o); }
  return a;
}

function lowerFirstChar(s) {
  return s.replace(/^\s*[^\s]/, m => m.toLowerCase());
}

function linkToIssue(...args) {
  let [repo, issue] = Array.from(args[0]);
  if (repo != null) {
    return util.format(EXTERNAL_LINK_ISSUE, repo, issue, repo, issue);
  } else {
    return util.format(LINK_ISSUE, issue, issue);
  }
}

function indent(s) {
  let lines = s.split('\n');
  let lastLine = lines.pop();
  let output = `  ${lines.join('\n  ')}`;
  output += lastLine.length > 0 ?
    `\n  ${lastLine}`
  :
    '\n';
  return output;
}

function linkToCommit(hash) {
  return util.format(LINK_COMMIT, hash.substr(0, 8), hash);
}

function currentDate() {
  let now = new Date();
  let pad = i => (`0${i}`).substr(-2);

  return util.format("%d-%s-%s", now.getFullYear(), pad(now.getMonth() + 1), pad(now.getDate()));
}

function findFixes(line, msg) {
  let issueRe = "([^\\s/]+/[^\\s#]+)?#(\\d+)";
  let re = new RegExp(`\
(?:\
close|closes|closed|\
fix|fixes|fixed|\
resolve|resolves|resolved\
)\
\\s\
${issueRe}\
`, 'i');

  let match = re.exec(line);

  if (match != null) {
    let [_, repo, issue] = Array.from(match);
    msg.closes.push([repo, issue]);
  }

  return (match == null);
}

function curateVersions (tagsSteps, commitsGroups) {
  let commits, tag;
  let commitsPerTag = [];
  for (let i = 0; i < commitsGroups.length; i++) {
    commits = commitsGroups[i];
    let current_tag = tagsSteps[i];
    // We don't really want to have HEAD considered as a tag,
    // so we'll mark it as undefined
    if (current_tag === HEAD) { current_tag = undefined; }
    commitsPerTag.push([current_tag, commits]);
  }

  let versions = [];

  for ([tag, commits] of Array.from(reverseArray(commitsPerTag))) {
    if (commits.length === 0) { continue; }

    let version = {
      tag,
      commits: {},
      breaks: []
    };

    for (let commit of Array.from(commits)) {
      if (commit.section != null) {
        (version.commits[commit.section] || (version.commits[commit.section] = [])).push(commit);
      }

      if (commit.breaking != null) { version.breaks.push(commit); }
    }

    versions.push(version);
  }

  return versions;
}

function getSectionConfig(name) {
  for (let section of Array.from(CONFIG.sections)) { if (section.name === name) { return section; } }
  return null;
};

function getCommitBody(commit, sectionConfig) {
  if (sectionConfig.include_body && (commit.body.length > 0)) {
    return indent(`<br>${commit.body}`);
  } else {
    return '';
  }
};

function getCommitCloses(commit) {
  let closes = commit.closes.map(linkToIssue).join(', ');
  if (closes.length > 0) {
    return `, ${closes}`;
  } else {
    return '';
  }
};

function getCommitOutput(commit, sectionConfig) {
  let closes = getCommitCloses(commit);
  let commitBody = getCommitBody(commit, sectionConfig);

  return `- ${commit.subject} (${linkToCommit(commit.hash)}${closes})${commitBody}\n`;
};

function printVersion(version, date) {
  let commit;
  let tag = version.tag != null ? version.tag : options.tag;
  stream.write(util.format(HEADER_TPL, tag, tag, date != null ? date : currentDate()));
  for (let sectionConfig of Array.from(CONFIG.sections)) {
    var commitOutput;
    let sectionName = sectionConfig.name;
    let commits = version.commits[sectionName];
    if (commits == null) { continue; }

    stream.write(`\n## ${sectionName}\n\n`);

    let nonGroupedCommits = commits.filter(commit => commit.group == null);
    var groupedCommits = {};
    commits.filter(commit => commit.group != null).forEach(function(commit) {
      if (!groupedCommits[commit.group]) { groupedCommits[commit.group] = []; }
      return groupedCommits[commit.group].push(commit);
    });

    for (let group in groupedCommits) {
      commits = groupedCommits[group];
      stream.write(`- **${group}**:\n`);
      for (commit of Array.from(commits)) {
        commitOutput = getCommitOutput(commit, sectionConfig);
        stream.write(indent(commitOutput));
      }
    }

    for (commit of Array.from(nonGroupedCommits)) {
      commitOutput = getCommitOutput(commit, sectionConfig);
      stream.write(commitOutput);
    }
  }

  let breakingCommits = version.breaks;
  if (breakingCommits.length) {
    stream.write('\n## Breaking Changes\n\n');
    for (commit of Array.from(breakingCommits)) {
      stream.write(`- due to ${linkToCommit(commit.hash)},${lowerFirstChar(commit.breaking)}\n`);
    }
  }

  return stream.write('\n');
};


function printVersions(versions, dates) {
  return Array.from(versions).map((version) =>
    printVersion(version, dates[version.tag]));
}
async function main() {
  const firstCommit = await getFirstCommit();

  let from;
  let to;

  if (options.start === FIRST_COMMIT) {
    from = await firstCommit;
  } else if (options.start === LAST_TAG) {
    from = await getPreviousTag();
  } else {
    from = options.start;
  }

  if (options.end === LAST_TAG) {
    to = await getPreviousTag();
  } else {
    to = options.end;
  }
  try {

    let tags = await getAllTags();
    const allTagsDate = await Promise.all(tags.map(tag => getDateOfTag(tag)))
    const tagsDates = {};
    for (let i = 0; i < allTagsDate.length; i++) {
      let date = allTagsDate[i];
      tagsDates[tags[i]] = date;
    }

    tags = tags.sort(naturalSort);
    tags.unshift(firstCommit);
    tags.push(HEAD);

    const startIndex = await findRevIndexForCommit(from, tags);
    const endIndex = await findRevIndexForCommit(to, tags);

    let toTag;
    const readCommits = [];
    const tagsSteps = [];
    if (endIndex !== startIndex) {
      for (let start = startIndex+1, i = start, end = endIndex, asc = start <= end; asc ? i <= end : i >= end; asc ? i++ : i--) {
        let from_tag = tags[i-1];
        toTag = tags[i];
        tagsSteps.push(toTag);

        readCommits.push(readGitLog(from_tag, toTag));
      }
    } else {
      toTag = tags[startIndex];
    }

    if (toTag !== to) {
      readCommits.push(readGitLog(options.grep, toTag, to));
    }

    const commitsGroups = await Promise.all(readCommits);
    const versions =  curateVersions(tagsSteps, commitsGroups);

    printVersions(versions, tagsDates);
  } catch(reason) {
    error(reason);
  }

}

main();
